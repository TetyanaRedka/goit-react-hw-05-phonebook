{"version":3,"sources":["Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","redux/contact/contactActions.js","redux/contact/contactReducer.js","redux/store.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","App.js","index.js","Components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","payload","id","name","number","deleteContact","filterContact","contacts","createReducer","contactsList","actions","state","filter","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ContactForm","changeData","e","currentTarget","value","setState","checkContact","props","normalizeName","toLowerCase","some","contact","submitContact","preventDefault","alert","uuidv4","onSubmit","reset","this","className","styles","formStyle","pointStyle","input","type","pattern","title","required","onChange","btn","Component","connect","dispatch","contactAction","contactActions","target","findtext","getVisibleContacts","normalizeFilter","toLocaleLowerCase","includes","map","deletebtn","onClick","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.aab0d50a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"findtext\":\"Filter_findtext__10Zkw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deletebtn\":\"ContactList_deletebtn__LsqeM\"};","// import types from './contactConstants'; //redux\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n//toolkit\r\n\r\nconst addContact = createAction('contact/add', ({ id, name, number }) => ({\r\n  payload: {\r\n    id,\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteContact = createAction('contact/delete');\r\nconst filterContact = createAction('contact/filter');\r\n\r\n//redux\r\n\r\n// const addContact = ({ id, name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id,\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const filterContact = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, filterContact };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n// import types from './contactConstants'; //redux\r\nimport actions from './contactActions'; //toolkit\r\n\r\nimport contactsList from '../../data/contacts-list.json';\r\n\r\n// toolkit\r\n\r\nconst contacts = createReducer(contactsList, {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\n// redux\r\n\r\n// const contacts = (state = contactsList, { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n});\r\n","// import { createStore, combineReducers } from 'redux'; // redux\r\n// import { composeWithDevTools } from 'redux-devtools-extension'; // redux\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'; // toolkit\r\nimport logger from 'redux-logger';\r\n\r\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\n\r\nimport contactReducer from './contact/contactReducer';\r\n\r\n// rootReducer on redux\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistedReducer(persistConfig, contactReducer),\r\n// });\r\n\r\n// store on redux\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n]; //toolkit\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\n//store on toolkit\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\n\r\nimport { connect } from 'react-redux';\r\nimport contactAction from '../../redux/contact/contactActions';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  changeData = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  checkContact = name => {\r\n    const contacts = this.props.contacts;\r\n\r\n    const normalizeName = name.toLowerCase();\r\n\r\n    return contacts.some(contact => contact.name.toLowerCase() === normalizeName);\r\n  };\r\n\r\n  submitContact = e => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n\r\n    if (this.checkContact(name)) {\r\n      alert(`${name} is already in contact`);\r\n      return;\r\n    }\r\n\r\n    const contact = {\r\n      id: uuidv4(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n\r\n    this.props.onSubmit(contact);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.submitContact} className={styles.formStyle}>\r\n        <label className={styles.pointStyle}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            value={name}\r\n            onChange={this.changeData}\r\n          />\r\n        </label>\r\n        <label className={styles.pointStyle}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n            value={number}\r\n            onChange={this.changeData}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.btn}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n  contacts: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { contacts } }) => ({\r\n  contacts: contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: contact => dispatch(contactAction.addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\nimport contactActions from '../../redux/contact/contactActions';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={styles.findtext}>\r\n      Find contact by name\r\n      <input type=\"text\" value={value} onChange={onChange} />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = ({ contacts }) => ({ value: contacts.filter });\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactActions.filterContact(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\n\r\nimport contactActions from '../../redux/contact/contactActions';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <ul>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <li key={id}>\r\n          {name}: {number}\r\n          <button className={styles.deletebtn} onClick={() => deleteContact(id)}>\r\n            удалить\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizeFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(contact => contact.name.toLocaleLowerCase().includes(normalizeFilter));\r\n};\r\n\r\n// // вариант 1\r\n// const mapStateToProps = state => {\r\n//   const { contacts, filter } = state.contacts;\r\n//   const visibleContacts = getVisibleContacts(contacts, filter);\r\n\r\n//   return {\r\n//     contacts: visibleContacts,\r\n//   };\r\n// };\r\n\r\n//вариант 2\r\nconst mapStateToProps = ({ contacts: { contacts, filter } }) => ({\r\n  contacts: getVisibleContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: id => dispatch(contactActions.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\n\nimport ContactForm from './Components/ContactForm';\nimport Filter from './Components/Filter';\nimport ContactList from './Components/ContactList';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formStyle\":\"ContactForm_formStyle__1MpKc\",\"pointStyle\":\"ContactForm_pointStyle__3a5qY\",\"btn\":\"ContactForm_btn__2Imgl\"};"],"sourceRoot":""}